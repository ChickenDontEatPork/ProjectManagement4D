// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ADVISOR
  PROCTOR
}

enum AssignmentStatus {
  NOTSEND
  SEND
  TURNINLATE
  REJECT_ADVISOR
  APPROVE_ADVISOR
  REJECT_PROCTOR
  APPROVE_PROCTOR
}

enum CommentAssignmentType {
  PRIVATE
  PUBLIC
}

model Users {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  email        String         @unique
  image        String
  name         String?        @db.VarChar(50)
  lastname     String?        @db.VarChar(50)
  tel          String?        @db.VarChar(10)
  role         Role           @default(STUDENT)
  register     Boolean        @default(false)
  Groups       Groups?
  AdvisorTopic AdvisorTopic[]

  CommentAssignments  CommentAssignments[]
  CommentAnnoucements CommentAnnoucements[]
  UserGroups          UserGroups?
  Assignments         Assignments[]
  Announcements       Announcements[]
}

model Tags {
  id              String            @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  AnnouncementTag AnnouncementTag[]
  Topics          Topics[]
}

model Topics {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  Tags         Tags           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId        String
  name         String
  description  String
  Groups       Groups?
  AdvisorTopic AdvisorTopic[]
}

model UserGroups {
  id      String @id @default(dbgenerated("gen_random_uuid()"))
  Groups  Groups @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  Users   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @unique
}

model GroupInvites {
  id      String   @id @default(dbgenerated("gen_random_uuid()"))
  code    String   @unique @default(dbgenerated("gen_random_uuid()"))
  expire  DateTime
  status  Boolean  @default(true)
  Groups  Groups   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String   @unique
}

model AdvisorTopic {
  Users     Users  @relation(fields: [advisorId], references: [id], onDelete: Cascade)
  advisorId String
  Topics    Topics @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String
  priority  Int

  @@id([advisorId, topicId])
}

model Announcements {
  id                  String                @id @default(dbgenerated("gen_random_uuid()"))
  Advisor             Users                 @relation(fields: [advisorId], references: [id], onDelete: Cascade)
  advisorId           String
  title               String
  description         String
  createAt            DateTime              @default(now())
  modifyAt            DateTime              @updatedAt()
  AnnouncementTag     AnnouncementTag[]
  CommentAnnoucements CommentAnnoucements[]
  AnnouncementFiles   AnnouncementFiles[]
}

model AnnouncementTag {
  Tags           Tags          @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId          String
  Announcements  Announcements @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String

  @@id([tagId, announcementId])
}

model Assignments {
  id                 String               @id @default(dbgenerated("gen_random_uuid()"))
  title              String
  Users              Users                @relation(fields: [advisorId], references: [id], onDelete: Cascade)
  advisorId          String
  description        String
  createAt           DateTime             @default(now())
  dueAt              DateTime
  CommentAssignments CommentAssignments[]
  AssignmentFiles    AssignmentFiles[]
  AssignmentSubmit   AssignmentSubmit[]
  AssignmentGroups   AssignmentGroups[]
}

model AssignmentGroups {
  Groups       Groups      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId      String
  Assignments  Assignments @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String

  @@id([groupId, assignmentId])
}

model AssignmentSubmit {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()"))
  Groups                Groups                  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId               String                  @unique
  Assignments           Assignments             @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId          String                  
  status                AssignmentStatus        @default(SEND)
  createAt              DateTime                @default(now())
  modifyAt              DateTime                @updatedAt
  AssignmentSubmitFiles AssignmentSubmitFiles[]
}

model AssignmentSubmitFiles {
  id                 String           @id @default(dbgenerated("gen_random_uuid()"))
  AssignmentSubmit   AssignmentSubmit @relation(fields: [assignmentSubmitId], references: [id], onDelete: Cascade)
  assignmentSubmitId String
  name               String
  bucket             String
  createAt           DateTime         @default(now())
}

model AssignmentFiles {
  id           String      @id @default(dbgenerated("gen_random_uuid()"))
  Assignments  Assignments @relation(fields: [assignmentId], references: [id])
  assignmentId String
  name         String
  bucket       String
  createAt     DateTime    @default(now())
}

model AnnouncementFiles {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  Announcements  Announcements @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  name           String
  bucket         String
  createAt       DateTime      @default(now())
}

model Groups {
  id               String             @id @default(dbgenerated("gen_random_uuid()"))
  Users            Users              @relation(fields: [createBy], references: [id], onDelete: Cascade)
  createBy         String             @unique
  Topics           Topics             @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId          String             @unique
  UserGroups       UserGroups[]
  GroupInvites     GroupInvites?
  AssignmentGroups AssignmentGroups[]
  AssignmentSubmit AssignmentSubmit?
}

model CommentAssignments {
  id           String      @id @default(dbgenerated("gen_random_uuid()"))
  Users        Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  Assigments   Assignments @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  description  String
  createAt     DateTime    @default(now())
}

model CommentAnnoucements {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  Users         Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  Annoucements  Announcements @relation(fields: [annoucementId], references: [id], onDelete: Cascade)
  annoucementId String
  description   String
  createAt      DateTime      @default(now())
}
